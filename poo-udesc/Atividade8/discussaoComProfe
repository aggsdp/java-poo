discussão com profe em sala - ap8


diferença persistencia
armazenar no arquivo


Ana, 4343
Fabiano, 3332244
Joao, 3432323

(formato csv)

cada linha do arquivo, contem info de um contato. cada atributo separado por virgula.
ordem nome primeiro, depois telefone



ORDEM::::
dados - contato
	- nome: String, - telefone: int 
	+ toString - retorna nome e telefone
	+ equals comparacao com telelfone if o instanceof Contato
	verificacao instanceof contato
	if(this.telefone == c.getTelefone()
persistencia: arquivos: 3 arquivocontatoDAO, contatoDao, editorTexto
	editorTexto: abre arquivo e escreve ou abre o arquivo e le do arquivo
		importacao de todas as biblios
		
		public void gravaTexto(String caminho, List<String>){
			Writer arquivo;
			
			try {
				arquivo = new FileWriter(caminho);
				for(String i : dados){
					arquivo.write(i + "\n);
				}
				arquivo.close();
			catch(IOExcepcion e) {
				System.err.println("Erro na escrita do arquivo");
				System.exit(0);
				
				--------------- outro metodo: agora quero dar uma pprend
				como paremetro tem a string caminho e ai uma string linha
				try {
				no newFile passa um true ao lado de caminho, e escreve a linha 
		
	arquivoContatoDAO: associacao com editorTexto. ela mapea o armazenamento de infos, leitura e transformacao em objeto. e entrega tudo isso na classe ContatoDAO - aqui estao as operacoes de CRUD
	
		public class ArquivoContatoDAO{
			private EditorTexto editorArquivo = new EditorTexto()
			private String caminho = "D:\\...."
			
			----------------
			fromCSV
			
			String atributos[] = s.split(",") //separar por virgula
			
			COntato c = new Contato()
			c.setNome(atributos[0])
			c.setTelefone(Integer.parseInt(atributos[1]))
			return c
			------------------
			
			List<contato> stringtoListaContato:
			instancia listaContato linkedlist contato
			
			for(String c : contatos){
				listaContatos.add(fromCSV(c))
			}
			return listaContatos
			
			---------------
			
			listacontatos instanciadas, o que muda eh que entra la o toCSV adicionado dentro da listaCOntatos
			--------------
			
			Lecontatos
			public List<COntato> leContatos(){
			return stringToListaContato(editorArquivo.leTexto(caminho)
			}
			-----------------
			public void salvaContatos(List<COntato> contatos){
			editor.Arquivo.gravaTexto(caminho, listaContatoTostring)
			}
			----------------------
			public void salvaContato(Contato contato){
			editorArquivo.gravaexto(caminho, toCSV(contato)
			}
	contatoDAO: camada de interface de persistencia, pois ela esconde a complexidade das outras duas classes 
			- ArquivoCOntatoDAO arquivoContatoDAO = new ArquivoCOntatoDAO();
			-----------
			public void insert(Contato contato){
				arquivoCOntatoDAO.salvaContato(contato)
			}
			
			--------------------
			public void delete(Contato contato)
			list<Contato> contatos = aquivosContato.DAo.leContatos
			contatos.remove(contato)
			arquivoContatoDAO.salvaCOntatos(contato)
			----------------------
			public Map<Character, List<Contato>> getAll(){
				Map<Character, List<Contato>> mapContatos = new hashmap...
				
				for (char i = 65; i< 91; i++){
					List<COntato> lista = new LinkedList<COntato>
					mapContatos.put(i, lista)
				}
				
				List<COntato> listCOntatos = arquivoContatoDAO.leCOntatos()
				
				for(Contato c : listContatos){
					String nome = c.getNome().toUpperCase()
					List<Contato> contatosTemp = mapContatos.get(nome.charAt(0))
					contatosTemp.add(c)
				}
				return mapContatos
			
negocio:
	pode inserir dado do arquivo, excluir dado do arquivo e pode pegar um dado do arquivo
	private ContatoDAO contatoDAO = newContatoDAO()
	
	-----------------------
	public void adicionarContato(COntato contato){
	contatoDAO.insert(contato)
	}
	
	---------------------
	public void remover
	contatoDAO.delete(contato)
	
	-----------------
	public list<contato> buscarContatos(char letra){
	return contatosDAO.getAll().get(letra)
	}
	
	--------------------
	
	map listarContatos
	return contatoDAO.getAll()
	
	-------------------------
	

apresentacao
	menu
	opcoes: cadastrar, remover, exibir
	
	
	




CRUD criacao, recuperacao, atualizada e exclusao - operações basicas de um sistema computacional. Crud do contato é implementar a persistencia, escrita no arquivo, atualizacao no arquivo, exclusao de um contato no arquivo, recuperacao dele no arquivo. nosso ex nao é completo.

